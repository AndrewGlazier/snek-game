{"version":3,"sources":["App.tsx","index.tsx"],"names":["GRID_WIDTH","cells","Array","GRID_HEIGHT","fill","undefined","map","val","idx","moveHead","position","direction","trueX","newPosition","length","randomFood","snake","nonSnakeCells","filter","item","includes","Math","floor","random","snakeHead","initialSnake","App","useState","touch","setTouch","paused","setPaused","gameOver","setGameOver","tick","setTick","setSnake","setDirection","food","setFood","score","speed","useEffect","body","head","newHead","newSnake","window","speechSynthesis","speak","SpeechSynthesisUtterance","setTimeout","getAdjacentClass","next","indexOf","previous","id","onTouchStart","evt","touches","screenX","screenY","onTouchEnd","changedTouches","newDirection","touchX","touchY","abs","nextHead","tabIndex","onKeyDown","event","code","onBlur","onFocus","rest","className","style","height","width","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdf81d8c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nconst GRID_WIDTH = 30;\r\nconst GRID_HEIGHT = 30;\r\n\r\nconst cells = new Array(GRID_HEIGHT * GRID_WIDTH).fill(undefined).map((val, idx) => idx);\r\n\r\ntype Direction = 'up' | 'down' | 'left' | 'right';\r\n\r\nconst moveHead = (position: number, direction: Direction) => {\r\n  const trueX = position % GRID_WIDTH;\r\n  \r\n  const steps = {\r\n    'up': -GRID_WIDTH,\r\n    'down': GRID_WIDTH,\r\n    'left': -1,\r\n    'right': 1,\r\n  };\r\n\r\n  const newPosition = position + steps[direction];\r\n\r\n  if (direction === 'left' && trueX === 0) {\r\n    return position + GRID_WIDTH - 1;\r\n  }\r\n  if (direction === 'right' && trueX === GRID_WIDTH - 1) {\r\n    return position - GRID_WIDTH + 1;\r\n  }\r\n  if (newPosition === cells.length + GRID_WIDTH) {\r\n    return 0;\r\n  }\r\n  if (newPosition < 0) {\r\n    return cells.length + newPosition;\r\n  }\r\n  if (newPosition > cells.length) {\r\n    return newPosition - cells.length;\r\n  }\r\n  \r\n  return newPosition;\r\n}\r\n\r\nconst randomFood = (snake: number[]) => {\r\n  const nonSnakeCells = cells.filter(item => !snake.includes(item));\r\n  const randomIndex = Math.floor(Math.random() * nonSnakeCells.length);\r\n  return nonSnakeCells[randomIndex];\r\n}\r\n\r\nconst snakeHead = (cells.length / 2) + (GRID_WIDTH / 2);\r\nconst initialSnake = [snakeHead - 4, snakeHead - 3, snakeHead - 2, snakeHead - 1, snakeHead];\r\n\r\nconst App = () => {\r\n  const [touch, setTouch] = useState<[number, number] | undefined>();\r\n  const [paused, setPaused] = useState(true);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [tick, setTick] = useState(0);\r\n  const [snake, setSnake] = useState<number[]>(initialSnake);\r\n  const [direction, setDirection] = useState<Direction>('right');\r\n  const [food, setFood] = useState(randomFood(snake));\r\n  const score = snake.length - initialSnake.length;\r\n  const speed = 100 - (score < 90 ? snake.length : 90);\r\n\r\n  useEffect(() => {\r\n    if (paused || gameOver) {\r\n      return;\r\n    }\r\n    const [tail, ...body] = snake;\r\n    const head = snake[snake.length - 1];\r\n    const newHead = moveHead(head, direction);\r\n    if ((newHead === food ? snake : body).includes(newHead)) {\r\n      setGameOver(true);\r\n      return;\r\n    }\r\n    if (newHead === food) {\r\n      const newSnake = [...snake, newHead];\r\n      setSnake(newSnake);\r\n      setFood(randomFood(newSnake));\r\n      window.speechSynthesis.speak(new SpeechSynthesisUtterance('om nom nom'));\r\n    } else {\r\n      setSnake([...body, newHead]);\r\n    }\r\n    setTimeout(() => setTick(tick + 1), speed);\r\n  }, [tick, paused]);\r\n\r\n  const restartGame = () => {\r\n    setTick(0);\r\n    setGameOver(false);\r\n    setSnake(initialSnake);\r\n    setFood(randomFood(initialSnake));\r\n    setDirection('right');\r\n  }\r\n\r\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n    if (event.code === 'KeyP') {\r\n      setPaused(true);\r\n      return;\r\n    }\r\n\r\n    const keyMap: { [key: string]: Direction } = {\r\n      'ArrowLeft': 'left',\r\n      'ArrowRight': 'right',\r\n      'ArrowDown': 'down',\r\n      'ArrowUp': 'up',\r\n      'KeyA': 'left',\r\n      'KeyD': 'right',\r\n      'KeyS': 'down',\r\n      'KeyW': 'up',\r\n    };\r\n    const newDirection = keyMap[event.code];\r\n    if (!newDirection) {\r\n      return;\r\n    }\r\n\r\n    const nextHead = moveHead(snake[snake.length - 1], newDirection);\r\n    if (snake.length > 1 && nextHead === snake[snake.length - 2]) {\r\n      // Don't allow the player to turn back on themselves\r\n      return;\r\n    }\r\n    setDirection(newDirection);\r\n  }\r\n\r\n  const getAdjacentClass = (val: number, next: boolean) => {\r\n    const idx = snake.indexOf(val);\r\n    if(next ? (snake.length - 1 === idx || idx === -1) : (idx === 0 || idx === -1)) {\r\n      return '';\r\n    }\r\n    const previous = snake[idx + (next ? 1 : -1)];\r\n    if (val - previous === -1 || val - previous === GRID_WIDTH - 1) {\r\n      return 'right';\r\n    }\r\n    if (val - previous === 1 || val - previous === -GRID_WIDTH + 1) {\r\n      return 'left';\r\n    }\r\n    if (val - previous === -GRID_WIDTH || val - previous === cells.length - GRID_WIDTH) {\r\n      return 'down';\r\n    }\r\n    if (val - previous === GRID_WIDTH || val - previous === -cells.length + GRID_WIDTH) {\r\n      return 'up';\r\n    }\r\n    return '';\r\n  }\r\n  return (\r\n    <div\r\n      id=\"page-container\"\r\n      onTouchStart={(evt) => {\r\n        if (evt.touches.length !== 1) {\r\n          setTouch(undefined);\r\n          return;\r\n        }\r\n        const { screenX, screenY } = evt.touches[0];\r\n        setTouch([screenX, screenY]);\r\n      }}\r\n      onTouchEnd={(evt) => {\r\n        if (evt.changedTouches.length !== 1 || !touch) {\r\n          return;\r\n        }\r\n        const [touchX, touchY] = touch;\r\n        const { screenX, screenY } = evt.changedTouches[0];\r\n        let newDirection: Direction;\r\n        if (Math.abs(screenX - touchX) > Math.abs(screenY - touchY)) {\r\n          if (screenX - touchX > 0) {\r\n            newDirection = 'right';\r\n          } else {\r\n            newDirection = 'left';\r\n          }\r\n        } else {\r\n          if (screenY - touchY > 0) {\r\n            newDirection = 'down';\r\n          } else {\r\n            newDirection = 'up';\r\n          }\r\n        }\r\n\r\n        const nextHead = moveHead(snake[snake.length - 1], newDirection);\r\n        if (snake.length > 1 && nextHead === snake[snake.length - 2]) {\r\n          // Don't allow the player to turn back on themselves\r\n          return;\r\n        }\r\n        setDirection(newDirection);\r\n      }}\r\n    >\r\n      <div\r\n        id=\"grid-container\"\r\n        tabIndex={0}\r\n        onKeyDown={handleKeyPress}\r\n        onBlur={() => setPaused(true)}\r\n        onFocus={() => setPaused(false)}\r\n      >\r\n        {\r\n          cells.map((val, idx, rest) => (\r\n            <div\r\n              key={val}\r\n              className={`\r\n                cell\r\n                ${snake.includes(idx) ? 'snake' : ''}\r\n                ${food === idx ? 'food' : ''}\r\n                ${getAdjacentClass(val, true)}\r\n                ${getAdjacentClass(val, false)}\r\n              `}\r\n              style={{\r\n                height: `${100 / GRID_HEIGHT}%`,\r\n                width: `${100 / GRID_WIDTH}%`,\r\n              }}\r\n            />\r\n          ))\r\n        }\r\n        <div id=\"score\">\r\n          <div>Current score: {score}</div>\r\n          { !paused && !gameOver && <div>Press P to pause</div> }\r\n        </div>\r\n        <div id=\"overlay\">\r\n          {\r\n            gameOver && !paused && (\r\n              <div>\r\n                <div>Game over</div>\r\n                <div onClick={restartGame}>Click here to restart</div>\r\n              </div>\r\n            )\r\n          }\r\n          {\r\n            !gameOver && paused && (\r\n              <div>\r\n                <div>Game paused</div>\r\n                <div onClick={() => setPaused(false)}>Click here to resume</div>\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}